package com.cnhi.pageObjects;

import java.time.Duration;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.auto.framework.base.Log;

import io.appium.java_client.AppiumDriver;
import io.appium.java_client.MobileElement;
import io.appium.java_client.pagefactory.AndroidFindBy;
import io.appium.java_client.pagefactory.AppiumFieldDecorator;
import io.appium.java_client.pagefactory.iOSXCUITFindBy;
import io.appium.java_client.remote.HideKeyboardStrategy;

public class VehicleDetailPage {

	public AppiumDriver<?> driver;
	GenericPage gMob;

	public VehicleDetailPage(AppiumDriver<?> driver, GenericPage ttMob) {
		this.driver = driver;
		this.gMob = ttMob;
		PageFactory.initElements(new AppiumFieldDecorator(driver), this);
	}

//---------------------- Vehicle Detail Tab Screens Elements-----------------------------

	// Vehicle Detail Screen Elements

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "//XCUIElementTypeButton[@name='Vehicle details']")
	private MobileElement vehicleDetailTab;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "//XCUIElementTypeOther[@name='Vehicle details']")
	private MobileElement vehicleDetailLabel;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='FDP Description in dealer language']/following-sibling:: XCUIElementTypeStaticText)[last()]")
	private MobileElement fDPDescriptionInDealerLanguageValue;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='Model description']/following-sibling:: XCUIElementTypeStaticText)[last()]")
	private MobileElement modelDescriptionValue;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='BM']/following-sibling:: XCUIElementTypeStaticText)[last()]")
	private MobileElement bMValue;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='FDP English description']/following-sibling:: XCUIElementTypeStaticText)[last()]")
	private MobileElement fDPEnglishDescriptionValue;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='FDP code']/following-sibling:: XCUIElementTypeStaticText)[last()]")
	private MobileElement fDPCodeValue;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='Sold-To Dealer Market']/following-sibling:: XCUIElementTypeStaticText)[last()]")
	private MobileElement soldToDealerMarketValue;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='Build date']/following-sibling:: XCUIElementTypeStaticText)[last()]")
	private MobileElement buildDateValue;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='Model Group']/following-sibling:: XCUIElementTypeStaticText)[last()]")
	private MobileElement modelGroupValue;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='Model Group']/following-sibling:: XCUIElementTypeStaticText)[last()]")
	private MobileElement productionPlantDescriptionValue;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "//XCUIElementTypeButton[@name='menu']/following-sibling::XCUIElementTypeButton")
	private List<MobileElement> vehicleMenuTabLists;

	// SAP end Customer Screen Elements

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "//XCUIElementTypeButton[@name='SAP end customer']")
	private MobileElement sAPEndCustomerTab;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "//XCUIElementTypeOther[@name='SAP end customer']")
	private MobileElement sAPEndCustomerLabel;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='End customer Country']/following-sibling:: XCUIElementTypeStaticText)[last()]")
	private MobileElement endCustomerCountryText;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='End customer Name']/following-sibling:: XCUIElementTypeStaticText)[last()]")
	private MobileElement endCustomerNameText;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='End customer City']/following-sibling:: XCUIElementTypeStaticText)[last()]")
	private MobileElement endCustomerCityText;

	// SAP Option Detail Screen Elements

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "//XCUIElementTypeButton[@name='SAP option details']")
	private MobileElement sAPOptionDetailsTab;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "//XCUIElementTypeOther[@name='SAP option details']")
	private MobileElement sAPOptionDetailsLabel;

	// SAP Repair History Screen Elements

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "//XCUIElementTypeButton[@name='SAP repair history']")
	private MobileElement sAPRepairHistoryTab;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "//XCUIElementTypeOther[@name='SAP repair history']")
	private MobileElement sAPRepairHistoryLabel;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "//XCUIElementTypeSearchField[@name='search text']")
	private MobileElement sAPRepairHistorySearchTextBox;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "//XCUIElementTypeStaticText[@name='Defect Description']")
	private MobileElement defectDescriptionLabel;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "//XCUIElementTypeStaticText[contains(@name,'DOOR LOCK,BLOCKAGE')]/following-sibling::XCUIElementTypeOther/XCUIElementTypeStaticText[@name='Show details']")
	private List<MobileElement> defectDescriptionBlockageWithShowDetailsLabel;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='Claim Repair End Date']/following-sibling::XCUIElementTypeStaticText)[1]")
	private MobileElement claimRepairEndDateText;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='Defect Code']/following-sibling::XCUIElementTypeStaticText)[1]")
	private MobileElement defectCodeText;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='Mileage/KM']/following-sibling::XCUIElementTypeStaticText)[1]")
	private MobileElement MileageKMText;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='Warranty Type']/following-sibling::XCUIElementTypeStaticText)[1]")
	private MobileElement warrantyTypeText;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='Workshop Description']/following-sibling::XCUIElementTypeStaticText)[1]")
	private MobileElement workshopDescriptionText;

	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='Workshop Description']/following-sibling::XCUIElementTypeStaticText)[1]")
	private MobileElement statusText;
	
	//Warranty Services Screen
	
	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "//XCUIElementTypeButton[@name='Warranty services']")
	private MobileElement warrantyServicesTab;
	
	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "//XCUIElementTypeStaticText[@name='Active Warranty Services']")
	private MobileElement activeWarrantyServicesLabel;
	
	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "//XCUIElementTypeStaticText[@name='Planned Warranty Services']")
	private MobileElement plannedWarrantyServicesLabel;
	
	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "//XCUIElementTypeStaticText[@name='Expired Warranty Services']")
	private MobileElement expiredWarrantyServicesLabel;
	
	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "//XCUIElementTypeStaticText[@name='No Data for this vehicle in this language']")
	private MobileElement noDataLabel;
	
	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "//XCUIElementTypeStaticText[@name='EXTRA P.D.I. 4000km LAI']/following-sibling::XCUIElementTypeOther/XCUIElementTypeStaticText[@name='Show details']")
	private MobileElement extraPDIShowDetails;
	
	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='Service Number']/following-sibling:: XCUIElementTypeStaticText)[last()]")
	private MobileElement serviceNumberText;
	
	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='Duration']/following-sibling:: XCUIElementTypeStaticText)[last()]")
	private MobileElement durationText;
	
	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='Start']/following-sibling:: XCUIElementTypeStaticText)[last()]")
	private MobileElement startText;
	
	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='Start']/following-sibling:: XCUIElementTypeStaticText)[last()]")
	private MobileElement endText;
	
	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='Mileage']/following-sibling:: XCUIElementTypeStaticText)[last()]")
	private MobileElement mileageText;
	
	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "(//XCUIElementTypeStaticText[@name='Contract']/following-sibling:: XCUIElementTypeStaticText)[last()]")
	private MobileElement contractText;
	
	//Warranty Services Screen
	@AndroidFindBy(xpath = "//android.widget.Button[@text='Next step']")
	@iOSXCUITFindBy(xpath = "//XCUIElementTypeButton[@name='Jobcard History']")
	private MobileElement jobcardHistoryTab;

	
	// Below Are The Methods Related To Vehicle Detail Screens
//**************************************************************************************************************************************

	// Vehicle Detail Screen

	public void clickVehicleDetailTab() {
		gMob.waitForVisibility(vehicleDetailTab, driver);
		gMob.clickElement(vehicleDetailTab, "Click On Vehicle Tab");
	}

	public boolean isVehicleDetailLabelVisible() throws Exception {
		gMob.waitForVisibility(vehicleDetailLabel, driver);
		return gMob.isElementVisibleWithinGivenTime(vehicleDetailLabel, 100, driver);
	}

	public String getFDPDescriptionInDealerLanguageValueFromJobDetail() throws Exception {
		gMob.waitForVisibility(fDPDescriptionInDealerLanguageValue, driver);
		String value = gMob.getElementText(fDPDescriptionInDealerLanguageValue, "name",
				"Getting FDP Description In Dealer Language Value");
		Log.info(value);
		return value;
	}

	public String getModelDescriptionValueFromJobDetail() throws Exception {
		gMob.waitForVisibility(modelDescriptionValue, driver);
		String value = gMob.getElementText(modelDescriptionValue, "name", "Getting Model Description Value");
		Log.info(value);
		return value;
	}

	public String getBMValyeValueFromJobDetail() throws Exception {
		gMob.waitForVisibility(bMValue, driver);
		String value = gMob.getElementText(bMValue, "name", "Getting BM Value");
		Log.info(value);
		return value;
	}

	public String getfDPEnglishDescriptionValueFromJobDetail() throws Exception {
		gMob.waitForVisibility(fDPEnglishDescriptionValue, driver);
		String value = gMob.getElementText(fDPEnglishDescriptionValue, "name", "Getting FDP English Description Value");
		Log.info(value);
		return value;
	}

	public String getfDPCodeValueFromJobDetail() throws Exception {
		gMob.waitForVisibility(fDPCodeValue, driver);
		String value = gMob.getElementText(fDPCodeValue, "name", "Getting FDP Code Value");
		Log.info(value);
		return value;
	}

	public String getSoldToDealerMarketValueFromJobDetail() throws Exception {
		gMob.waitForVisibility(soldToDealerMarketValue, driver);
		String value = gMob.getElementText(soldToDealerMarketValue, "name", "Getting Sold To Dealer Market Value");
		Log.info(value);
		return value;
	}

	public String getbuildDateValuetFromJobDetail() throws Exception {
		gMob.waitForVisibility(buildDateValue, driver);
		String value = gMob.getElementText(buildDateValue, "name", "Getting Build Date Value");
		Log.info(value);
		return value;
	}

	public String getmodelGroupValueFromJobDetail() throws Exception {
		gMob.waitForVisibility(modelGroupValue, driver);
		String value = gMob.getElementText(modelGroupValue, "name", "Getting Model Group Value");
		Log.info(value);
		return value;
	}

	public String getProductionPlantDescriptionValueFromJobDetail() throws Exception {
		gMob.waitForVisibility(productionPlantDescriptionValue, driver);
		String value = gMob.getElementText(productionPlantDescriptionValue, "name",
				"Getting Production Plant Description Value");
		Log.info(value);
		return value;
	}

	// SAP end Customer Screen

	public void clickSapEndCustomerTab() {
		gMob.waitForVisibility(sAPEndCustomerTab, driver);
		gMob.clickElement(sAPEndCustomerTab, "Click On SAP End Customer Tab");
	}

	public boolean isSAPEndCustomerLabelVisible() throws Exception {
		gMob.waitForVisibility(sAPEndCustomerLabel, driver);
		return gMob.isElementVisibleWithinGivenTime(sAPEndCustomerLabel, 100, driver);
	}

	public boolean isEndCustomerCountryTextVisibleEmpty() throws Exception {
		gMob.waitForVisibility(endCustomerCountryText, driver);
		return gMob.getElementText(endCustomerCountryText, "value", "Getting Last Value Of End Customer Country")
				.equals(":");
	}

	public boolean isEndCustomerNameTextVisibleEmpty() throws Exception {
		gMob.waitForVisibility(endCustomerNameText, driver);
		return gMob.getElementText(endCustomerNameText, "value", "Getting Last Value Of End Customer Name").equals(":");
	}

	public boolean isEndCustomerCityTextVisibleEmpty() throws Exception {
		gMob.waitForVisibility(endCustomerCityText, driver);
		return gMob.getElementText(endCustomerCityText, "value", "Getting Last Value Of End Customer City").equals(":");
	}

	// SAP End Customer Screen

	public void clickSapOptionDetailTab() throws InterruptedException {
		int startX = 290;
		int startY = 98;
		int endX = 42;
		int endY = 98;
		for (int i = 0; i <= 10; i++) {
			Log.info("Waiting For Element " + i);
			try {
				if (gMob.getElementText(sAPOptionDetailsTab, "visible", "").equals("true")) {
					Log.info("Repair History Tab Screen Is Visible");
					gMob.clickElement(sAPOptionDetailsTab, "Click On Vehicle Tab");
					break;
				} else {
					gMob.swipe(startX, startY, endX, endY, 1000, driver);
				}
			} catch (Exception e) {
				gMob.swipe(startX, startY, endX, endY, 1000, driver);
				if (i > 10) {
					Log.info(e.getMessage());
					e.printStackTrace();
				}

			}
		}
	}

	// SAP Repair History Screen

	public void clickRepairHistoryTab() throws InterruptedException {
		int startX = 290;
		int startY = 98;
		int endX = 42;
		int endY = 98;
		for (int i = 0; i <= 10; i++) {
			Log.info("Waiting For Element " + i);
			try {
				if (gMob.getElementText(sAPRepairHistoryTab, "visible", "").equals("true")) {
					Log.info("Repair History Tab Screen Is Visible");
					gMob.clickElement(sAPRepairHistoryTab, "Click On Vehicle Tab");
					break;
				} else {
					gMob.swipe(startX, startY, endX, endY, 1000, driver);
				}
			} catch (Exception e) {
				gMob.swipe(startX, startY, endX, endY, 1000, driver);
				if (i > 10) {
					Log.info(e.getMessage());
					e.printStackTrace();
				}
			}
		}
	}

	public boolean isRepairHistoryLabelVisible() throws Exception {
		gMob.waitForVisibility(sAPRepairHistoryLabel, driver);
		return gMob.isElementVisibleWithinGivenTime(sAPRepairHistoryLabel, 100, driver);
	}

	public boolean isSapRepairHistorySearchTextBoxVisible() throws Exception {
		gMob.waitForVisibility(sAPRepairHistorySearchTextBox, driver);
		return gMob.isElementVisibleWithinGivenTime(sAPRepairHistorySearchTextBox, 100, driver);
	}

	public boolean isDefectDescriptionLabelVisible() throws Exception {
		gMob.waitForVisibility(defectDescriptionLabel, driver);
		return gMob.isElementVisibleWithinGivenTime(defectDescriptionLabel, 100, driver);
	}

	public boolean isdefectDescriptionBlockageWithShowDetailsLabelVisible() {
		return defectDescriptionBlockageWithShowDetailsLabel.size() == 1;
	}

	public void clickDefectDescriptionBlockageWithShowDetail() {
		gMob.waitForVisibility(defectDescriptionBlockageWithShowDetailsLabel.get(0), driver);
		gMob.clickElement(defectDescriptionBlockageWithShowDetailsLabel.get(0), "Click On SAP End Customer Tab");
	}

	public String getClaimRepairEndDateData() throws Exception {
		gMob.waitForVisibility(claimRepairEndDateText, driver);
		String value = gMob.getElementText(claimRepairEndDateText, "name", "Getting claim Repair End date Value");
		Log.info(value);
		return value;
	}

	public String getadefectCodeData() throws Exception {
		gMob.waitForVisibility(defectCodeText, driver);
		String value = gMob.getElementText(defectCodeText, "name", "Getting defect code Value");
		Log.info(value);
		return value;
	}

	public String getMileageKMtData() throws Exception {
		gMob.waitForVisibility(MileageKMText, driver);
		String value = gMob.getElementText(MileageKMText, "name", "Getting Mileage KM Value");
		Log.info(value);
		return value;
	}

	public String getWarrantyTypeData() throws Exception {
		gMob.waitForVisibility(warrantyTypeText, driver);
		String value = gMob.getElementText(warrantyTypeText, "name", "Getting Warranty Type Value");
		Log.info(value);
		return value;
	}

	public String getWorkshopDescriptionData() throws Exception {
		gMob.waitForVisibility(workshopDescriptionText, driver);
		String value = gMob.getElementText(workshopDescriptionText, "name", "Getting Workshop Description Value");
		Log.info(value);
		return value;
	}
	
	public String getStatusData() throws Exception {
		gMob.waitForVisibility(statusText, driver);
		String value = gMob.getElementText(statusText, "name", "Getting Status Value");
		Log.info(value);
		return value;
	}

}
